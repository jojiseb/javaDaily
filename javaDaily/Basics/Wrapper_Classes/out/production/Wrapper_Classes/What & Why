What ?
    Wrapper Classes are those classes whose objects wraps or contains primitive data type

 Why ?
    -> They help to convert primitive data-types to objects:
            When we need to modify arguments which are passed to a method,
            Objects are needed cuz, primitive types are passed as value.
    -> Collections primarily deals with Objects(Ref. types) rather than primitives:
            It helps to handle collections of any type of objects including user-defined.
            Working with objects allows Polymorphism, different types of objects can be
            treated uniformly. Eg: List can hold objects of diff. types as long as they
            inherit a common Super class/implement common interface.
    -> Primitive types doesn't have any methods/props associated with them:
            Primitives are made to be light-weight, store fixed value, easily predictable
            behaviour. Eg: int behaves as an integer and mathematical operations on it work
            as such.
                   More methods n props should make it less predictable

           So, Basically the need for methods on these types is solved by Wrapper Classes

           So, We can call multiple methods like compareTo(), equals(),toString() etc.
    ->  Objects can have null values where primitives can't:
                Integer a = null;
                int b = null // throw error
    -> Object is needed to support multithreading
                Integer a = null;
                int b = null // throw error,helpful in threading envt to handle default/empty
                values